import io
import json
import random

import aiohttp
from PIL import Image
from discord import (ApplicationContext, Embed, IntegrationType,
                     InteractionContextType, File)
from discord.ext import commands


class Pollinate(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.models = ["sdxl", "anything-v5", "dreamshaper-v7", "deliberate-v3", "realistic-vision-v4", "sd-v1-5"]

    @commands.slash_command(
        name="cuteimagehehe",
        description="a cute ai image from your imagination :>",
        integration_types=[
            IntegrationType.user_install
        ],
        contexts=[
            InteractionContextType.bot_dm,
            InteractionContextType.private_channel,
            InteractionContextType.guild,
        ]
    )
    async def imagine(
            self,
            ctx: ApplicationContext,
            prompt: str,
            width: int = 1000,
            height: int = 1000,
            model: str = "sdxl",
            enhance: bool = False,
            negative: str = None,
            nologo: bool = True
    ):
        await ctx.defer()

        try:
            seed = str(random.randint(0, 1000000000))

            url = f"https://image.pollinations.ai/prompt/{prompt}"
            url += f"?seed={seed}"
            url += f"&width={width}"
            url += f"&height={height}"
            url += f"&model={model}"
            url += f"&negative={negative}" if negative else ""
            url += f"&nologo={nologo}" if nologo else ""
            url += f"&enhance={enhance}" if enhance else ""
            url += "&referer=discordbot"

            async with aiohttp.ClientSession() as session:
                async with session.get(url, allow_redirects=True) as response:
                    if response.status != 200:
                        await ctx.followup.send("Error generating image!", ephemeral=True)
                        return

                    image_data = await response.read()
                    image_file = io.BytesIO(image_data)

                    try:
                        image = Image.open(io.BytesIO(image_data))
                        exif = image.info["exif"].decode("latin-1", errors="ignore")
                        user_comment = json.loads(exif[exif.find("{"): exif.rfind("}") + 1])
                        nsfw = user_comment.get("has_nsfw_concept", False)
                        enhanced_prompt = user_comment.get("prompt", "").split("\n")[0] if enhance else None
                    except:
                        nsfw = False
                        enhanced_prompt = None

                    discord_file = File(image_file, filename="image.png")
                    if nsfw:
                        discord_file.filename = f"SPOILER_{discord_file.filename}"

                    embed = Embed(
                        title="ðŸŒ¸ Generated Image",
                        color=0xffc0cb
                    )
                    embed.add_field(name="Prompt", value=f"```{prompt}```", inline=False)

                    if enhanced_prompt:
                        embed.add_field(name="Enhanced Prompt", value=f"```{enhanced_prompt}```", inline=False)

                    embed.add_field(name="Model", value=f"```{model}```", inline=True)
                    embed.add_field(name="Size", value=f"```{width}x{height}```", inline=True)
                    embed.add_field(name="Seed", value=f"```{seed}```", inline=True)

                    if negative:
                        embed.add_field(name="Negative Prompt", value=f"```{negative}```", inline=False)

                    embed.set_image(url="attachment://image.png")
                    embed.set_footer(text=f"Generated by {ctx.author}")

                    await ctx.followup.send(file=discord_file, embed=embed)

        except Exception as e:
            await ctx.followup.send(f"Error: {str(e)}", ephemeral=True)


def setup(bot):
    bot.add_cog(Pollinate(bot))
